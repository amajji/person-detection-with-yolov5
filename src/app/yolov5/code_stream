-------- HTML 
        <div style="float:right; display:inline-block; width: 50%; height: 100%; border: dashed 2px black; margin:0% auto; " class="div2">
            <div style="   width: 50%; height: 40%; border: dashed 2px red; margin: 20% auto auto; background-color: black" >

                <img src='{{ url_for('yolov_stream') }}' style="   width: 100%; height: 100%; "  >
            </div>


            <button  class="btn first"   style = '  display:flex;   width : 21%; height: 6%; margin:10% auto;'    > Start </button>
        </div>


-------- PYTHON






############################################################################################################################
#                                  Author: Anass MAJJI                                                                     #
#                               File Name: app/app.py                                                                      #
#                           Creation Date: May 05, 2022                                                              #
#                         Source Language: Python                                                                          #
#         Repository:    https://github.com/amajji/Crop-and-OCR-documents-and-deployment-using-FastAPI-and-DOCKER.git      #
#                              --- Code Description ---                                                                    #
#                         FastAPI code for the model deployment                                                            #
############################################################################################################################





############################################################################################################################
#                                                 Packages                                                                 #
############################################################################################################################



import uvicorn
import io
import os
from fastapi import FastAPI, Request
from fastapi import File, UploadFile

from fastapi import Depends, FastAPI, Form
from fastapi import FastAPI, Request
from fastapi.responses import HTMLResponse, FileResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from fastapi.responses import StreamingResponse
from werkzeug.utils import secure_filename


import cv2
import torch
from PIL import Image
import base64

##########################################################################################################################
#                                                 Main Code                                                              #
##########################################################################################################################


app = FastAPI()

templates = Jinja2Templates(directory="templates/")
app.mount("/static", StaticFiles(directory="static"), name = "static")

path = r"/home/majji/Documents/project_github/person detection yolov5/yolov5-master"
# load yolov 5 model
model = torch.hub.load(path, 'custom', path="yolov5s.pt", source='local')
# detect only persons
model.classes = 0

print("model loeaded")

#app.config['UPLOAD_FOLDER'] = '/home/majji/Documents/project_github/person detection yolov5/webapp/static/uploads/'

@app.get('/')
def window_princip(request: Request):
    print("----------------- Je suis la ----------------")
    return templates.TemplateResponse('base_page.html', context= {"request": request})




@app.post('/uploader_')
async def uploader(request: Request, file_1: UploadFile = File(...)):

        doc = await file_1.read()


        img = Image.open(file_1.file)

        results = model(img)
        results.save("/home/majji/Documents/project_github/person detection yolov5/image_resultat.jpg")
        print("model finished")

        # Results
        results.print()

        print("ouiiiiii")




        #doc.save("tttttttoot.png")
        #doc.save(os.path.join(app.config['UPLOAD_FOLDER'], secure_filename(doc.filename)))

        return templates.TemplateResponse('base_page.html', context= {"request": request})






import argparse
import os
import platform
import sys
from pathlib import Path

import torch
from io import BytesIO


from models.common import DetectMultiBackend
from utils.dataloaders import IMG_FORMATS, VID_FORMATS, LoadImages, LoadScreenshots, LoadStreams
from utils.general import (LOGGER, Profile, check_file, check_img_size, check_imshow, check_requirements,
                           colorstr, cv2,
                           increment_path, non_max_suppression, print_args, scale_boxes, strip_optimizer,
                           xyxy2xywh)
from utils.plots import Annotator, colors, save_one_box
from utils.torch_utils import select_device, smart_inference_mode



# FILE = Path(__file__).resolve()
# ROOT = FILE.parents[0]  # YOLOv5 root directory
ROOT = os.path.dirname(os.path.realpath('__file__'))
if str(ROOT) not in sys.path:
        sys.path.append(str(ROOT))  # add ROOT to PATH
ROOT = Path(os.path.relpath(ROOT, Path.cwd()))  # relative

@smart_inference_mode()
@app.get('/yolov_stream')
def yolov_stream(request: Request):
        def run(weights=ROOT / 'yolov5s.pt',  # model path or triton URL
                source=0,  # file/dir/URL/glob/screen/0(webcam)
                data=ROOT / 'data/coco128.yaml',  # dataset.yaml path
                imgsz=(640, 640),  # inference size (height, width)
                conf_thres=0.25,  # confidence threshold
                iou_thres=0.45,  # NMS IOU threshold
                max_det=1000,  # maximum detections per image
                device='',  # cuda device, i.e. 0 or 0,1,2,3 or cpu
                view_img=False,  # show results
                save_txt=False,  # save results to *.txt
                save_conf=False,  # save confidences in --save-txt labels
                save_crop=False,  # save cropped prediction boxes
                nosave=False,  # do not save images/videos
                classes=0,  # filter by class: --class 0, or --class 0 2 3
                agnostic_nms=False,  # class-agnostic NMS
                augment=False,  # augmented inference
                visualize=False,  # visualize features
                update=False,  # update all models
                project=ROOT / 'runs/detect',  # save results to project/name
                name='exp',  # save results to project/name
                exist_ok=False,  # existing project/name ok, do not increment
                line_thickness=3,  # bounding box thickness (pixels)
                hide_labels=False,  # hide labels
                hide_conf=False,  # hide confidences
                half=False,  # use FP16 half-precision inference
                dnn=False,  # use OpenCV DNN for ONNX inference
                vid_stride=1,  # video frame-rate stride
        ):



                print("ohh jolie")
                source = str(source)
                print(" source ", source)
                save_img = not nosave and not source.endswith('.txt')  # save inference images
                is_file = Path(source).suffix[1:] in (IMG_FORMATS + VID_FORMATS)
                is_url = source.lower().startswith(('rtsp://', 'rtmp://', 'http://', 'https://'))
                webcam = source.isnumeric() or source.endswith('.streams') or (is_url and not is_file)
                screenshot = source.lower().startswith('screen')
                if is_url and is_file:
                        source = check_file(source)  # download

                # Directories
                save_dir = increment_path(Path(project) / name, exist_ok=exist_ok)  # increment run
                (save_dir / 'labels' if save_txt else save_dir).mkdir(parents=True, exist_ok=True)  # make dir

                # Load model
                device = select_device(device)
                print("-- devise -- ", device)
                model = DetectMultiBackend(weights, device=device, dnn=dnn, data=data, fp16=half)
                stride, names, pt = model.stride, model.names, model.pt
                imgsz = check_img_size(imgsz, s=stride)  # check image size

                # Dataloader
                bs = 1  # batch_size
                if webcam:
                        view_img = check_imshow(warn=True)
                        dataset = LoadStreams(source, img_size=imgsz, stride=stride, auto=pt, vid_stride=vid_stride)
                        bs = len(dataset)
                elif screenshot:
                        dataset = LoadScreenshots(source, img_size=imgsz, stride=stride, auto=pt)
                else:
                        dataset = LoadImages(source, img_size=imgsz, stride=stride, auto=pt, vid_stride=vid_stride)
                vid_path, vid_writer = [None] * bs, [None] * bs

                # Run inference
                model.warmup(imgsz=(1 if pt or model.triton else bs, 3, *imgsz))  # warmup
                seen, windows, dt = 0, [], (Profile(), Profile(), Profile())
                for path, im, im0s, vid_cap, s in dataset:

                        with dt[0]:
                                im = torch.from_numpy(im).to(model.device)
                                im = im.half() if model.fp16 else im.float()  # uint8 to fp16/32
                                im /= 255  # 0 - 255 to 0.0 - 1.0
                                if len(im.shape) == 3:
                                        im = im[None]  # expand for batch dim

                        # Inference
                        with dt[1]:
                                visualize = increment_path(save_dir / Path(path).stem,
                                                           mkdir=True) if visualize else False
                                pred = model(im, augment=augment, visualize=visualize)

                        # NMS
                        with dt[2]:
                                pred = non_max_suppression(pred, conf_thres, iou_thres, classes, agnostic_nms,
                                                           max_det=max_det)

                        # Second-stage classifier (optional)
                        # pred = utils.general.apply_classifier(pred, classifier_model, im, im0s)

                        # Process predictions
                        for i, det in enumerate(pred):  # per image
                                seen += 1
                                if webcam:  # batch_size >= 1
                                        p, im0, frame = path[i], im0s[i].copy(), dataset.count
                                        s += f'{i}: '
                                else:
                                        p, im0, frame = path, im0s.copy(), getattr(dataset, 'frame', 0)

                                p = Path(p)  # to Path
                                save_path = str(save_dir / p.name)  # im.jpg
                                txt_path = str(save_dir / 'labels' / p.stem) + (
                                        '' if dataset.mode == 'image' else f'_{frame}')  # im.txt
                                s += '%gx%g ' % im.shape[2:]  # print string
                                gn = torch.tensor(im0.shape)[[1, 0, 1, 0]]  # normalization gain whwh
                                imc = im0.copy() if save_crop else im0  # for save_crop
                                annotator = Annotator(im0, line_width=line_thickness, example=str(names))

                                if len(det):

                                        # Rescale boxes from img_size to im0 size
                                        det[:, :4] = scale_boxes(im.shape[2:], det[:, :4], im0.shape).round()

                                        # Print results
                                        for c in det[:, 5].unique():
                                                n = (det[:, 5] == c).sum()  # detections per class
                                                s += f"{n} {names[int(c)]}{'s' * (n > 1)}, "  # add to string

                                        # Write results
                                        for *xyxy, conf, cls in reversed(det):

                                                if save_txt:  # Write to file
                                                        xywh = (xyxy2xywh(torch.tensor(xyxy).view(1, 4)) / gn).view(
                                                                -1).tolist()  # normalized xywh
                                                        line = (cls, *xywh, conf) if save_conf else (
                                                        cls, *xywh)  # label format
                                                        with open(f'{txt_path}.txt', 'a') as f:
                                                                f.write(('%g ' * len(line)).rstrip() % line + '\n')

                                                if save_img or save_crop or view_img:  # Add bbox to image
                                                        c = int(cls)  # integer class
                                                        label = None if hide_labels else (
                                                                names[c] if hide_conf else f'{names[c]} {conf:.2f}')
                                                        annotator.box_label(xyxy, label, color=colors(c, True))
                                                if save_crop:
                                                        save_one_box(xyxy, imc, file=save_dir / 'crops' / names[
                                                                c] / f'{p.stem}.jpg', BGR=True)

                                # Stream results
                                im0 = annotator.result()
                                #cv2.imwrite('./Test_image_couscous.jpg', im0)
                                print("--- oui je suis la ----- ")
                                print("image outputs' dimensions --- ", im0.shape)
                                # line that fixed it
                                _, encoded_img = cv2.imencode('.png', im0)

                                encoded_image = base64.b64encode(encoded_img).decode("utf-8")

                                print("ouiiiiii ------ ")

                                yield (b'--frame\r\n' b'Content-Type: image/jpeg\r\n\r\n' + bytearray(encoded_img) + b'\r\n')

                                #yield encoded_image

        image_bytes: bytes = run()
        print("oooo")
        #image_stream = io.BytesIO(image_bytes)
        return StreamingResponse(content = image_bytes,  media_type="multipart/x-mixed-replace;boundary=frame")









# Run the application

if __name__ == "__main__":
    uvicorn.run(app)